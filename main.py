#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script principal pour le scraping PagesJaunes et stockage MongoDB
Collections automatiques par type d'√©tablissement
"""

import os
import sys
import json
import glob
from datetime import datetime
import logging

# Ajouter le dossier src au path pour les imports
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from scrapers.pagesjaunes_simple_module import PagesJaunesScraper
from storage.mongodb_storage import load_and_store_data

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scraping.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class ScrapingManager:
    """Gestionnaire principal pour le scraping et stockage par type"""
    
    def __init__(self, mongo_host="localhost", mongo_port=27017):
        self.mongo_host = mongo_host
        self.mongo_port = mongo_port
        self.dossier_resultats = "resultats"
        
    def demarrer_scraping_complet(self, quoi_qui=None, ou=None, auto_store=True):
        """
        Lance le processus complet de scraping et stockage
        
        Args:
            quoi_qui (str): Ce que l'on recherche (ex: restaurant, coiffeur)
            ou (str): O√π chercher (ex: Paris, Lyon, 75001)
            auto_store (bool): Si True, stocke automatiquement en MongoDB
        
        Returns:
            dict: Statistiques du processus
        """
        logger.info("=== D√âBUT DU PROCESSUS DE SCRAPING COMPLET ===")
        
        # 1. Demander les param√®tres si non fournis
        if not quoi_qui:
            quoi_qui = input("Que voulez-vous rechercher ? (ex: restaurant, coiffeur, dentiste): ")
        if not ou:
            ou = input("O√π ? (ex: Paris, Lyon, 75001): ")
            
        logger.info(f"Recherche: '{quoi_qui}' √† '{ou}'")
        logger.info("Mode: Collections par type d'√©tablissement")
        
        # 2. Lancer le scraping
        logger.info("√âtape 1/3: Lancement du scraping PagesJaunes...")
        
        try:
            scraper = PagesJaunesScraper()
            fichier_json = scraper.executer_scraping(quoi_qui, ou)
            
            if not fichier_json or not os.path.exists(fichier_json):
                logger.error("‚ùå √âchec du scraping - Aucun fichier g√©n√©r√©")
                return {"success": False, "error": "Scraping √©chou√©"}
                
            logger.info(f"‚úÖ Scraping termin√© - Fichier: {fichier_json}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du scraping: {e}")
            return {"success": False, "error": str(e)}
        
        # 3. V√©rifier le contenu du fichier
        logger.info("√âtape 2/3: V√©rification des donn√©es extraites...")
        
        try:
            with open(fichier_json, 'r', encoding='utf-8') as f:
                donnees = json.load(f)
                
            nb_etablissements = len(donnees)
            logger.info(f"‚úÖ {nb_etablissements} √©tablissements trouv√©s dans le fichier")
            
            if nb_etablissements == 0:
                logger.warning("‚ö†Ô∏è Aucun √©tablissement extrait")
                return {
                    "success": True,
                    "file_path": fichier_json,
                    "establishments_found": 0,
                    "stored_in_db": False
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la lecture du fichier JSON: {e}")
            return {"success": False, "error": f"Lecture fichier √©chou√©e: {e}"}
        
        # 4. Stockage en MongoDB (si demand√©)
        if auto_store:
            logger.info("√âtape 3/3: Stockage en MongoDB...")
            
            try:
                success_db = load_and_store_data(
                    fichier_json,
                    mongo_host=self.mongo_host,
                    mongo_port=self.mongo_port
                )
                
                if success_db:
                    logger.info("‚úÖ Donn√©es stock√©es avec succ√®s en MongoDB")
                    return {
                        "success": True,
                        "file_path": fichier_json,
                        "establishments_found": nb_etablissements,
                        "stored_in_db": True
                    }
                else:
                    logger.error("‚ùå √âchec du stockage en MongoDB")
                    return {
                        "success": True,
                        "file_path": fichier_json,
                        "establishments_found": nb_etablissements,
                        "stored_in_db": False,
                        "db_error": "Stockage √©chou√©"
                    }
                    
            except Exception as e:
                logger.error(f"‚ùå Erreur lors du stockage MongoDB: {e}")
                return {
                    "success": True,
                    "file_path": fichier_json,
                    "establishments_found": nb_etablissements,
                    "stored_in_db": False,
                    "db_error": str(e)
                }
        else:
            logger.info("√âtape 3/3: Stockage MongoDB ignor√© (auto_store=False)")
            return {
                "success": True,
                "file_path": fichier_json,
                "establishments_found": nb_etablissements,
                "stored_in_db": False
            }
    
    def stocker_fichier_existant(self, chemin_fichier):
        """
        Stocke un fichier JSON existant en MongoDB
        
        Args:
            chemin_fichier (str): Chemin vers le fichier JSON
            
        Returns:
            bool: True si succ√®s
        """
        logger.info(f"Stockage du fichier existant: {chemin_fichier}")
        
        if not os.path.exists(chemin_fichier):
            logger.error(f"‚ùå Fichier non trouv√©: {chemin_fichier}")
            return False
            
        try:
            success = load_and_store_data(
                chemin_fichier,
                mongo_host=self.mongo_host,
                mongo_port=self.mongo_port
            )
            
            if success:
                logger.info("‚úÖ Fichier stock√© avec succ√®s en MongoDB")
            else:
                logger.error("‚ùå √âchec du stockage")
                
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Erreur: {e}")
            return False
    
    def lister_fichiers_resultats(self):
        """Liste tous les fichiers de r√©sultats disponibles"""
        if not os.path.exists(self.dossier_resultats):
            logger.info("Aucun dossier de r√©sultats trouv√©")
            return []
            
        fichiers = glob.glob(os.path.join(self.dossier_resultats, "*.json"))
        fichiers.sort(key=os.path.getmtime, reverse=True)  # Plus r√©cent en premier
        
        logger.info(f"{len(fichiers)} fichier(s) de r√©sultats trouv√©(s):")
        for i, fichier in enumerate(fichiers, 1):
            taille = os.path.getsize(fichier)
            mtime = datetime.fromtimestamp(os.path.getmtime(fichier))
            logger.info(f"  {i}. {os.path.basename(fichier)} ({taille} bytes, {mtime})")
            
        return fichiers


def menu_principal():
    """Menu interactif principal"""
    manager = ScrapingManager()
    
    while True:
        print("\n" + "="*60)
        print("üï∑Ô∏è  SCRAPER PAGESJAUNES + MONGODB")
        print("="*60)
        print("1. üöÄ Scraping complet (scraping + stockage MongoDB)")
        print("2. üì• Stocker un fichier JSON existant en MongoDB")
        print("3. üìã Lister les fichiers de r√©sultats")
        print("4. üîß Scraping uniquement (sans stockage)")
        print("5. ‚ùå Quitter")
        print("="*60)
        print("üíæ Mode: Collections par type d'√©tablissement")
        print("="*60)
        
        choix = input("Votre choix (1-5): ").strip()
        
        if choix == "1":
            print("\nüöÄ SCRAPING COMPLET")
            print("-" * 30)
            resultat = manager.demarrer_scraping_complet()
            
            print("\nüìä R√âSUM√â:")
            if resultat["success"]:
                print(f"‚úÖ Fichier g√©n√©r√©: {resultat['file_path']}")
                print(f"üìç √âtablissements trouv√©s: {resultat['establishments_found']}")
                print(f"üíæ Stock√© en MongoDB: {'‚úÖ' if resultat['stored_in_db'] else '‚ùå'}")
            else:
                print(f"‚ùå Erreur: {resultat['error']}")
                
        elif choix == "2":
            print("\nüì• STOCKAGE FICHIER EXISTANT")
            print("-" * 30)
            fichiers = manager.lister_fichiers_resultats()
            
            if not fichiers:
                print("Aucun fichier trouv√©.")
                continue
                
            try:
                index = int(input("Num√©ro du fichier √† stocker: ")) - 1
                if 0 <= index < len(fichiers):
                    manager.stocker_fichier_existant(fichiers[index])
                else:
                    print("‚ùå Num√©ro invalide")
            except ValueError:
                print("‚ùå Veuillez entrer un num√©ro valide")
                
        elif choix == "3":
            print("\nüìã FICHIERS DE R√âSULTATS")
            print("-" * 30)
            manager.lister_fichiers_resultats()
            
        elif choix == "4":
            print("\nüîß SCRAPING UNIQUEMENT")
            print("-" * 30)
            resultat = manager.demarrer_scraping_complet(auto_store=False)
            
            print("\nüìä R√âSUM√â:")
            if resultat["success"]:
                print(f"‚úÖ Fichier g√©n√©r√©: {resultat['file_path']}")
                print(f"üìç √âtablissements trouv√©s: {resultat['establishments_found']}")
                print("‚ÑπÔ∏è Stockage MongoDB ignor√©")
            else:
                print(f"‚ùå Erreur: {resultat['error']}")
                
        elif choix == "5":
            print("üëã Au revoir!")
            break
            
        else:
            print("‚ùå Choix invalide")


if __name__ == "__main__":
    try:
        # V√©rifier que nous sommes dans le bon r√©pertoire
        if not os.path.exists("src"):
            print("‚ùå ERREUR: Veuillez ex√©cuter ce script depuis le dossier ScrapJaune")
            print("üí° Exemple: cd ScrapJaune && python main.py")
            sys.exit(1)
            
        # Cr√©er le dossier de r√©sultats s'il n'existe pas
        if not os.path.exists("resultats"):
            os.makedirs("resultats")
            
        # Lancer le menu principal
        menu_principal()
        
    except KeyboardInterrupt:
        print("\n\n‚è∏Ô∏è Interruption par l'utilisateur")
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")
        sys.exit(1) 